package com.viris.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Collections;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;

import org.ini4j.Ini;

import com.example.service.SerializedMethod;
import com.example.service.Serialized;
import com.example.service.TransactionUnit;
import com.example.service.SerializedObject;
import com.viris.debuger.Init;
import com.viris.debuger.SocketClient;

public class ApkBrowser extends JPanel implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1326174530156602511L;
	protected DefaultMutableTreeNode rootNode;
	protected DefaultTreeModel treeModel;
	protected JTree tree;
	private SocketClient client;
	private Init ini;
	private HashMap<String, DefaultMutableTreeNode> sobjects;
	private JPanel control;
	private JTextArea exec;
	private JButton execute;
	private JLabel status;
	private JCheckBox showmethods;
	private static String EXECUTE="CMD_EXECUTE";
	private CellRenderer renderer;
	
	public static void main(String[] args){
		Init ini = new Init();
		
		String command = args[0];
		int port = Integer.parseInt(args[1]);
		SocketClient c = new SocketClient(port);
		ApkBrowser browser = new ApkBrowser(ini);
		browser.client = c;
		if(command.equals("stop")){
			browser.stopService();
			return;
		}
		if(!command.equals("start")){
			return;
		}
	
		
		
		
		try {
			browser.createAndShow(c);
			browser.setPreferredSize(new Dimension(900, 600));
			browser.buildTree();
			browser.setOpaque(true);
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		JFrame frame = new JFrame("APK Browser");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocation(300, 150);
		frame.setContentPane(browser);
		// Display the window.
		frame.pack();
		frame.setVisible(true);
	}

	
	public ApkBrowser(Init ini){
		super(new BorderLayout());
		this.ini = ini;
		sobjects = new HashMap<String, DefaultMutableTreeNode>();
	}
	public void createAndShow(SocketClient client) {

	

		rootNode = new DefaultMutableTreeNode("Application");
		treeModel = new DefaultTreeModel(rootNode);
		
		tree = new JTree(treeModel);
		tree.setEditable(true);
		tree.getSelectionModel().setSelectionMode(
				TreeSelectionModel.SINGLE_TREE_SELECTION);
		tree.setShowsRootHandles(true);
		//adding a cell renderer
		renderer = new CellRenderer();
		
		tree.setCellRenderer(renderer);
		
		//in new future user should change descriptions of tree nodes - will help if obfuscated code
		tree.setEditable(false);
	
		
		MouseListener ml = new DoubleClickListener();
		tree.addMouseListener(ml);
		
		JScrollPane scrollPane = new JScrollPane(tree);
		
		exec = new JTextArea();
		JScrollPane scrollPane2 = new JScrollPane(exec);

		JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
				scrollPane, scrollPane2);
		
		splitPane.setResizeWeight(0.5);
		splitPane.setOneTouchExpandable(true);
		splitPane.setContinuousLayout(true);

		add(splitPane, BorderLayout.CENTER);
		
		control = new JPanel(new GridBagLayout());
		execute = new JButton("Execute");
		execute.setActionCommand(EXECUTE);
		execute.setPreferredSize(new Dimension(30,20));
		execute.addActionListener(this);

		
		
		status = new JLabel("");
		status.setPreferredSize(new Dimension(300,20));
		showmethods = new JCheckBox(" SHOW METHODS");
		GridBagConstraints c = new GridBagConstraints();
		c.weightx = 0.7;
	    c.fill = GridBagConstraints.HORIZONTAL;
	    c.gridx = 0;
	    c.gridy = 0;
	    control.add(status,c);
	    
		c.weightx = 0.2;
	    c.fill = GridBagConstraints.HORIZONTAL;
	    c.gridx = 1;
	    c.gridy = 0;
		control.add(execute,c);
	
	
	
		c.weightx = 0.1;
	    c.fill = GridBagConstraints.HORIZONTAL;
	    c.gridx = 2;
	    c.gridy = 0;
		control.add(showmethods,c);
		
		add(control,BorderLayout.PAGE_END);
		
	
		
	}


	 
	public void buildTree() throws IOException, ClassNotFoundException {
		// get rootObjects from Socket client
		SerializedObject object = new SerializedObject("", "",0, "", "");
		TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
		tu.desc = "init";
		List<TransactionUnit<?>> elements = client.message(tu);
		Collections.sort(elements, new Comparator<TransactionUnit<?>>() {
			public int compare(TransactionUnit<?> so1, TransactionUnit<?> so2) {
				Serialized s1 = (Serialized) so1.get();
				Serialized s2 = (Serialized) so2.get();
				if (s1.depth < s2.depth) {
					return -1;
				} else if (s1.depth > s2.depth) {
					return 1;
				} else {
					return 0;
				}
			}
		});
		
		if(sobjects !=null){
			sobjects.clear();
		}
		for (TransactionUnit<?> element : elements) {
			Serialized s = (Serialized)element.get();
			this.addObject(null, s);
		
		}
	}
	



	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
			Object child) {
		return addObject(parent, child, false);
	}

	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
			Object child, boolean shouldBeVisible) {
	

		if (parent == null) {
			parent = rootNode;
		}

		DefaultMutableTreeNode childNode = null;
		
		
		if(child instanceof SerializedObject){
			SerializedObject sonew = (SerializedObject) child;
			
			if(sobjects.containsKey(sonew.reference)){
				SerializedObject soold = (SerializedObject)(sobjects.get(sonew.reference).getUserObject());
				
				if ((sonew.value != null) &&  (soold.value == null)){	
					sonew.changed=true;
				}else if( (sonew.value == null) && (soold.value != null) ){	
					sonew.changed=true;
				}else if((sonew.value !=null) &&  (soold.value!=null)){
					if(!sonew.value.equals(soold.value)){
						sonew.changed=true;
					}
				}
				
				if(!sonew.changed){
					sonew.changed=false;	
				}
				sobjects.remove(sonew.reference);
				childNode = new DefaultMutableTreeNode(sonew);
				sobjects.put(sonew.reference,childNode);
				treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
			}else{
				childNode = new DefaultMutableTreeNode(sonew);
				sobjects.put(sonew.reference,childNode);	
				treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
			}		
			
		}else if (child instanceof SerializedMethod){
			SerializedMethod smnew = (SerializedMethod) child;
			childNode = new DefaultMutableTreeNode(smnew);
			treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
			
		}
		// Make sure the user can see the lovely new node.
		if (shouldBeVisible) {
			tree.scrollPathToVisible(new TreePath(childNode.getPath()));
		}
		
		return childNode;
	}
	
	class DoubleClickListener extends MouseAdapter{
		@Override
		public void mousePressed(MouseEvent e) {
			int selRow = tree.getRowForLocation(e.getX(), e.getY());
			TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
			if (selRow != -1) {
				
				DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) selPath
						.getLastPathComponent();
				
				if (SwingUtilities.isRightMouseButton(e) ) {
					
					if (selRow == 0) {
						
						SerializedObject object = new SerializedObject("", "",0, "", "");
						TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
						tu.desc = "init";
						List<TransactionUnit<?>> elements;
						try {
							elements = client.message(tu);
							Collections.sort(elements, new Comparator<TransactionUnit<?>>() {
								public int compare(TransactionUnit<?> so1, TransactionUnit<?> so2) {
									Serialized s1 = (Serialized) so1.get();
									Serialized s2 = (Serialized) so2.get();
									if (s1.depth < s2.depth) {
										return -1;
									} else if (s1.depth > s2.depth) {
										return 1;
									} else {
										return 0;
									}
								}
							});
							
							
							
							selectedNode.removeAllChildren();
							treeModel.reload();
							
							
							for (TransactionUnit<?> element : elements) {
								Serialized s = (Serialized)element.get();
								if(s instanceof SerializedObject){
									addObject(selectedNode,s);
								}
								else if(s instanceof SerializedMethod && showmethods.isSelected())
									addObject(selectedNode,s);												
							}
							
							Utils.expandAll(tree, true);
							
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						
					} else {	
								
						Serialized so = (Serialized) selectedNode
								.getUserObject();
						if(! (so instanceof SerializedObject)){
							return;
						}
						SerializedObject object = (SerializedObject)so;
						
						
						TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
						tu.desc = "get";
						tu.command="0-"+String.valueOf(showmethods.isSelected());
						List<TransactionUnit<?>> elements;
						try {
							elements = client.message(tu);
							//if no elements recieved
							if(elements == null || elements.size()==0){
								return;
							}
							//we remove all children before update;
							selectedNode.removeAllChildren();
							treeModel.reload();
							
							Collections.sort(elements,
									new Comparator<TransactionUnit<?>>() {
										public int compare(
												TransactionUnit<?> so1,
												TransactionUnit<?> so2) {
											Serialized a = (Serialized)so1.get();
											Serialized b = (Serialized)so2.get();
											if (a.depth < b.depth) {
												return -1;
											} else if (a.depth > b.depth) {
												return 1;
											} else {
												return 0;
											}
										}
									});

							for (TransactionUnit<?> element : elements) {
								Serialized s = (Serialized)element.get();
								if(s instanceof SerializedObject){
									SerializedObject sobj = (SerializedObject) s;
									DefaultMutableTreeNode parent = sobjects.get(sobj.parent);	
									addObject(parent,sobj);	
									
								}
								else if ((s instanceof SerializedMethod) && showmethods.isSelected()){
									SerializedMethod sobj = (SerializedMethod) s;
									DefaultMutableTreeNode parent = sobjects.get(sobj.parent);
									addObject(parent,sobj);															
								}
								
							}					
							
							
							Utils.expandAll(tree, true);
							tree.setSelectionRow(selRow);
						
							
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						
					}
					
				}else if(e.getClickCount() == 1){			
					
					if (selRow != 0){
						Serialized so = (Serialized) selectedNode
								.getUserObject();
						if(! (so instanceof SerializedObject)){
							return;
						}
						SerializedObject object = (SerializedObject)so;
						status.setText(object.type+" : "+object.value);
					
						
					} 
				}else if(e.getClickCount() == 2){
					if (selRow != 0){
						 tree.setSelectionRow(selRow);
						 Serialized so = (Serialized) selectedNode
									.getUserObject();
							if((so instanceof SerializedObject)){
								 SerializedObject object = (SerializedObject)so;
								 exec.insert("["+object.reference+"]", exec.getCaretPosition());
								
							}else if(so instanceof SerializedMethod){
								SerializedMethod sm = (SerializedMethod) so;
								exec.insert("["+sm.parent+"]."+sm.name+"();", exec.getCaretPosition());
								
								
							}
						
					} 
			    }
				
			}
		}
		
	}
	

	public Init getIni(){
		return this.ini;
	}
	
	public void stopService(){
		SerializedObject object = new SerializedObject("", "",0, "", "");
		TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
		tu.desc = "stop";
		try {
			client.message(tu);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {

		String command = e.getActionCommand();

		if (EXECUTE.equals(command)) {
			
			TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(
					null);
			
			tu.desc = "execute";
			tu.command = exec.getText();
			
			try {
				client.message(tu);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
	}
	
}
