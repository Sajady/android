package com.viris.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Collections;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;

import org.ini4j.Ini;

import com.example.service.SerializedMethod;
import com.example.service.Util;
import com.example.service.Serialized;
import com.example.service.TransactionUnit;
import com.example.service.SerializedObject;
import com.viris.debuger.Init;
import com.viris.debuger.SocketClient;

public class ApkBrowser extends JPanel implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1326174530156602511L;
	protected DefaultMutableTreeNode rootNode;
	protected DefaultTreeModel treeModel;
	protected JTree tree;
	private Toolkit toolkit = Toolkit.getDefaultToolkit();
	private SocketClient client;
	private FieldPanel set;
	private static String SET_COMMAND="SET_VALUE";
	private static String INVOKE_COMMAND="INVOKE_METHOD";
	private TreePath current_tree_path;
	private Init ini;

	public static void main(String[] args){
		Init ini = new Init();
		ApkBrowser browser = new ApkBrowser(ini);
		try {
			browser.createAndShow(new SocketClient(38301));
			browser.setPreferredSize(new Dimension(900, 600));
			browser.buildTree();
			browser.setOpaque(true);
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		JFrame frame = new JFrame("APK Browser");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocation(300, 150);
		frame.setContentPane(browser);
		// Display the window.
		frame.pack();
		frame.setVisible(true);
	}

	
	public ApkBrowser(Init ini){
		super(new BorderLayout());
		this.ini = ini;
	}
	public void createAndShow(SocketClient client) {

		//init SocketClient
		this.client = client;

		rootNode = new DefaultMutableTreeNode("Application");
		treeModel = new DefaultTreeModel(rootNode);
		treeModel.addTreeModelListener(new MyTreeModelListener());
		tree = new JTree(treeModel);
		tree.setEditable(true);
		tree.getSelectionModel().setSelectionMode(
				TreeSelectionModel.SINGLE_TREE_SELECTION);
		tree.setShowsRootHandles(true);

		MouseListener ml = new DoubleClickListener();
		tree.addMouseListener(ml);
		JScrollPane scrollPane = new JScrollPane(tree);
		add(scrollPane,BorderLayout.CENTER);
		
		set = new FieldPanel();
		set.set.setActionCommand(SET_COMMAND);
		set.invoke.setActionCommand(INVOKE_COMMAND);
		set.set.addActionListener(this);
		set.invoke.addActionListener(this);
		add(set,BorderLayout.SOUTH);

		
	}
	public void setPosition(TreePath path){
		this.current_tree_path = path;
	}

	 
	public void buildTree() throws IOException, ClassNotFoundException {
		// get rootObjects from Socket client
		SerializedObject object = new SerializedObject("", "",0, "", "");
		TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
		tu.desc = "init";
		List<TransactionUnit<?>> elements = client.message(tu);
		Collections.sort(elements, new Comparator<TransactionUnit<?>>() {
			public int compare(TransactionUnit<?> so1, TransactionUnit<?> so2) {
				Serialized s1 = (Serialized) so1.get();
				Serialized s2 = (Serialized) so2.get();
				if (s1.__depth < s2.__depth) {
					return -1;
				} else if (s1.__depth > s2.__depth) {
					return 1;
				} else {
					return 0;
				}
			}
		});

		for (TransactionUnit<?> element : elements) {
			Serialized s = (Serialized)element.get();
			DefaultMutableTreeNode tn = this.addObject(null, s);
		
		}
	}
	/** Remove all nodes except the root node. */
	public void clear() {
		rootNode.removeAllChildren();
		treeModel.reload();
	}

	/** Remove the currently selected node. */
	public void removeCurrentNode() {
		TreePath currentSelection = tree.getSelectionPath();
		if (currentSelection != null) {
			DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) (currentSelection
					.getLastPathComponent());
			MutableTreeNode parent = (MutableTreeNode) (currentNode.getParent());
			if (parent != null) {
				treeModel.removeNodeFromParent(currentNode);
				return;
			}
		}

		// Either there was no selection, or the root was selected.
		toolkit.beep();
	}

	/** Add child to the currently selected node. */
	public DefaultMutableTreeNode addObject(Object child) {
		DefaultMutableTreeNode parentNode = null;
		TreePath parentPath = tree.getSelectionPath();

		if (parentPath == null) {
			parentNode = rootNode;
		} else {
			parentNode = (DefaultMutableTreeNode) (parentPath
					.getLastPathComponent());
		}

		return addObject(parentNode, child, true);
	}

	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
			Object child) {
		return addObject(parent, child, false);
	}

	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
			Object child, boolean shouldBeVisible) {
		DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);

		if (parent == null) {
			parent = rootNode;
		}

		// It is key to invoke this on the TreeModel, and NOT
		// DefaultMutableTreeNode
		treeModel.insertNodeInto(childNode, parent, parent.getChildCount());

		// Make sure the user can see the lovely new node.
		if (shouldBeVisible) {
			tree.scrollPathToVisible(new TreePath(childNode.getPath()));
		}
		return childNode;
	}

	 
	class DoubleClickListener extends MouseAdapter{
		@Override
		public void mousePressed(MouseEvent e) {
			int selRow = tree.getRowForLocation(e.getX(), e.getY());
			TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
			setPosition(selPath);
			if (selRow != -1) {
			
				DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) selPath
						.getLastPathComponent();
				if(e.getClickCount() == 1){			
				
					if (selRow != 0){
						Serialized so = (Serialized) selectedNode
								.getUserObject();
						if(! (so instanceof SerializedObject)){
							return;
						}
						SerializedObject object = (SerializedObject)so;
						set.setText(object.type);
						set.setValue(object.value);
						
					} 
				}else if (e.getClickCount() == 2) {
					
					if (selRow == 0) {
						
						SerializedObject object = new SerializedObject("", "",0, "", "");
						TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
						tu.desc = "init";
						List<TransactionUnit<?>> elements;
						try {
							elements = client.message(tu);
							Collections.sort(elements, new Comparator<TransactionUnit<?>>() {
								public int compare(TransactionUnit<?> so1, TransactionUnit<?> so2) {
									Serialized s1 = (Serialized) so1.get();
									Serialized s2 = (Serialized) so2.get();
									if (s1.__depth < s2.__depth) {
										return -1;
									} else if (s1.__depth > s2.__depth) {
										return 1;
									} else {
										return 0;
									}
								}
							});
							selectedNode.removeAllChildren();
							treeModel.reload();
							for (TransactionUnit<?> element : elements) {
								Serialized s = (Serialized)element.get();
								if(ini.show_methods)
									addObject(selectedNode,s);
								else{
									if(s instanceof SerializedObject)
										addObject(selectedNode,s);
								}
							}
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						
					} else {	
						
						
						Serialized so = (Serialized) selectedNode
								.getUserObject();
						if(! (so instanceof SerializedObject)){
							return;
						}
						SerializedObject object = (SerializedObject)so;
						
						
						TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
						tu.desc = "get";
						List<TransactionUnit<?>> elements;
						try {
							elements = client
									.message(tu);
							//if no elements recieved
							if(elements == null || elements.size()==0){
								return;
							}
							//we remove all children before update;
							selectedNode.removeAllChildren();
							treeModel.reload();
							
							Collections.sort(elements,
									new Comparator<TransactionUnit<?>>() {
										public int compare(
												TransactionUnit<?> so1,
												TransactionUnit<?> so2) {
											Serialized a = (Serialized)so1.get();
											Serialized b = (Serialized)so2.get();
											if (a.__depth < b.__depth) {
												return -1;
											} else if (a.__depth > b.__depth) {
												return 1;
											} else {
												return 0;
											}
										}
									});

							for (TransactionUnit<?> element : elements) {
								Serialized s = (Serialized)element.get();
								if(ini.show_methods)
									addObject(selectedNode,s);
								else{
									if(s instanceof SerializedObject)
										addObject(selectedNode,s);
								}
								
							}					
							tree.expandPath(selPath);					
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						
					}
				}
			}
		}
		
	}
	
	class MyTreeModelListener implements TreeModelListener {
		public void treeNodesChanged(TreeModelEvent e) {
			DefaultMutableTreeNode node;
			node = (DefaultMutableTreeNode) (e.getTreePath()
					.getLastPathComponent());

		
			int index = e.getChildIndices()[0];
			node = (DefaultMutableTreeNode) (node.getChildAt(index));

		}

		public void treeNodesInserted(TreeModelEvent e) {
		}

		public void treeNodesRemoved(TreeModelEvent e) {
		}

		public void treeStructureChanged(TreeModelEvent e) {
		}
	}

	public Init getIni(){
		return this.ini;
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {

		String command = e.getActionCommand();

		if (SET_COMMAND.equals(command)) {

			DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) current_tree_path
					.getLastPathComponent();

			Serialized so = (Serialized) selectedNode.getUserObject();
			if (!(so instanceof SerializedObject)) {
				return;
			}
			SerializedObject object = (SerializedObject) so;

			if (Util.isObjectPrimitive(object.type)) {
				object.value = set.value.getText();
			
			}
			TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(
					object);
			tu.desc = "set";
			try {
				client.message(tu);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}else if (INVOKE_COMMAND.equals(command)) {

			DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) current_tree_path
					.getLastPathComponent();

			Serialized so = (Serialized) selectedNode.getUserObject();
			if (!(so instanceof SerializedMethod)) {
				return;
			}
			SerializedMethod method = (SerializedMethod) so;
			String[] params = new String[]{set.value.getText()};
			if(set.value.getText().contains(",")){
				 params = set.value.getText().split(",");
			}
			
			int i=0;
			for(SerializedObject object : method.params){
				object.value = params[i];
			}
			
			TransactionUnit<SerializedMethod> tu = new TransactionUnit<SerializedMethod>(method);
			tu.desc = "invoke";
			try {
				client.message(tu);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
	}
	
}
