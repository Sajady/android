package com.viris.debuger;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import org.omg.CORBA.portable.ApplicationException;

import android.content.Intent;
import android.widget.Toast;

import com.example.service.Test;
import com.example.service.TransactionUnit;
import com.example.service.SerializedObject;
import com.example.smalli.NextActivity;

public class SocketClient {

	private int socket;
	private Socket s;
	
	public static void main(String args[]){
		SocketClient client;
		try {
			client = new SocketClient(38301);
			SerializedObject object = new SerializedObject("", "",0, "41bc0620", "41bc0620");
			object.value="new SecretApp(\"This is my secret app\")";
			TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
			tu.desc="execute";
			//tu.command="import android.content.Intent; import com.example.smalli.NextActivity; Intent intent = new Intent([41b79fa8],NextActivity.class);[41b79fa8].startActivity(intent);";
			tu.command="[-1989731876]=new com.example.smalli.SecretApp(\"this is my string\");";
			//tu.command="[41c1cfd8]=99;";
			client.message(tu);
			
		
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public SocketClient(int socket) throws UnknownHostException, IOException{
		this.socket = socket;
		//we try to open a connection if service is listenig and closing after
		s = new Socket("localhost",socket);
		s.close();
		
	}

	public List<TransactionUnit<?>> message(TransactionUnit<?> msg) throws IOException, ClassNotFoundException {
		
		
			s = new Socket("localhost",socket);  
		
			ObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());
			out.writeObject(msg);  
			
			ObjectInputStream in = new ObjectInputStream(s.getInputStream()); 
			
			List<TransactionUnit<?>> list=null;
			List<TransactionUnit<?>> copy = new ArrayList<TransactionUnit<?>>();
			while( (list = (List<TransactionUnit<?>>)in.readObject()) != null){

				for (TransactionUnit<?> element : list){
					copy.add(element);
					System.out.println(element.toString());  
				}
				
			}
		
			in.close();
			out.close(); 
			return null;
			//return copy;
			 
		
		
	}
}
