package com.viris.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.io.FileUtils;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.example.service.SerializedObject;
import com.example.service.TransactionUnit;
import com.viris.debuger.Init;
import com.viris.debuger.SocketClient;

public class Main extends JPanel implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2110691268627743502L;
	public BufferedReader input;
	private JFileChooser fc;
	private JTextArea log;
	private JScrollPane pane;
	private ApkBrowser browser;
	private static JFrame frame;
	private Init init;
	private SocketClient client;
	private Execute exec;
	private boolean wait;
	
	public Main(){
		this.init = new Init();
		fc = new JFileChooser();
		log = new JTextArea(20, 80);
		pane = new JScrollPane(log);
		this.add(pane);
		
	}
	private static void createAndShowGUI() {
		frame = new JFrame("APK Browser");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocation(300, 150);
	
		
		Main proc = new Main();
		Menu menu = new Menu(proc);
		frame.setJMenuBar(menu);
		frame.setContentPane(proc);
		// Display the window.
		frame.pack();
		frame.setVisible(true);
	}

	public static void main(String[] args) {
		
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				createAndShowGUI();
			}
		});
	}

	private  class Execute extends javax.swing.SwingWorker<Boolean,String> {

		Process p;
		

		JTextArea jta;
		String line;


	
		
		public Execute(Process process, JTextArea jta) {
			this.p = process;
			this.jta = jta;
		}	

		public Boolean doInBackground() throws Exception {
		
			
			if(p!=null){
			
				BufferedReader is = new BufferedReader(new InputStreamReader(
						p.getInputStream()));

				while ((line = is.readLine()) != null) {
					publish(new String(line + "\n"));
				}
			}
			System.out.flush();
			return true;
		
		}
		public Process getP() {
			return p;
		}

		public void setP(Process p) {
			this.p = p;
		}
		public void process(List<String> lines) {
			for (String o : lines) {
				jta.append(o);
			}
			
		}

		public void done() {
			try {
				get();
				
			} catch (Exception ex) {
			
			}
		}
	}
	public void runCommand(final String[] command) {
			/*
			try {
		      String line;
		      Process p = Runtime.getRuntime().exec
		      (command);
		      BufferedReader input =
		        new BufferedReader
		          (new InputStreamReader(p.getInputStream()));
		      while ((line = input.readLine()) != null) {
		        System.out.println(line);
		      }
		      input.close();
		    }
		    catch (Exception err) {
		      err.printStackTrace();
		    }*/
			
			ProcessBuilder broker = new ProcessBuilder(command);
			Process proc;
			try {
				proc = broker.start();
				
				if(exec == null){
					this.exec = new Execute(proc, log);
				}
				this.exec.execute();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
	}

	public void install(){
		int returnVal = fc.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			log.append("INSTALLING  APK...\n\n");
			String[] command = null;

			
			File file = fc.getSelectedFile();
			String source = file.getAbsolutePath();
			String destination = System.getProperty("user.dir") + "/temp/apk";
			command = new String[] { init.path_to_apktool, "d", "-f", source,
					destination };
		
			
			runCommand(command);
			

			source = System.getProperty("user.dir") + "/Smalli.apk";
			destination = System.getProperty("user.dir") + "/temp/Smalli";
			command = new String[] { init.path_to_apktool, "d", "-f", source,
					destination };

			runCommand(command);

			source = System.getProperty("user.dir") + "/temp/Smalli/smali/com";

			destination = System.getProperty("user.dir") + "/temp/apk/smali";

			try {
				FileUtils.copyDirectoryToDirectory(new File(source), new File(
						destination));
			} catch (IOException ex) {
				// TODO Auto-generated catch block
				ex.printStackTrace();
			}

			// replacing port
			try {
				source = System.getProperty("user.dir")
						+ "/temp/apk/smali/com/example/service/SocketService.smali";
				File manifest = new File(source);
				BufferedReader reader = new BufferedReader(new FileReader(
						manifest));
				String sline = "", oldtext = "";
				while ((sline = reader.readLine()) != null) {

					oldtext += sline + "\r\n";

				}
				reader.close();

				String replace = "0x" + Integer.toHexString(init.port);
				// replacing the hex value "0x959d" => 38301 in smali file with
				// config port
				String newtext = oldtext.replaceAll("0x959d", replace);
				FileWriter writer = new FileWriter(source);
				writer.write(newtext);
				writer.close();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}

			try {
				source = System.getProperty("user.dir")
						+ "/temp/apk/AndroidManifest.xml";
				File manifest = new File(source);
				BufferedReader reader = new BufferedReader(new FileReader(
						manifest));
				String sline = "", oldtext = "";
				while ((sline = reader.readLine()) != null) {

					oldtext += sline + "\r\n";

				}
				reader.close();

				String replace = "<service android:name=\"com.example.service.SocketService\" android:enabled=\"true\" android:exported=\"true\"><intent-filter><action android:name=\"com.example.smalli.service\"/> </intent-filter></service></application>";

				String newtext = oldtext.replaceAll("</application>", replace);
				FileWriter writer = new FileWriter(source);
				writer.write(newtext);
				writer.close();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}

		

			
			source = System.getProperty("user.dir") + "/temp/apk";
			destination = System.getProperty("user.dir") + "/temp/tmp.apk";
			command = new String[] { init.path_to_apktool, "b", "-f", source,
					destination };

			runCommand(command);

			command = new String[] { init.path_to_jarsigner, "-verbose",
					"-sigalg", "MD5withRSA", "-digestalg", "SHA1", "-keystore",
					init.path_to_keystore, "-storepass", "android",
					"-signedjar",
					System.getProperty("user.dir") + "/temp/signed_tmp.apk",
					System.getProperty("user.dir") + "/temp/tmp.apk",
					"androiddebugkey" };

			runCommand(command);

			
			command = new String[] { init.path_to_adb, "install",
					System.getProperty("user.dir") + "/temp/signed_tmp.apk" };

			runCommand(command);



			String packageName = "";
			try {
				DocumentBuilderFactory dbf = DocumentBuilderFactory
						.newInstance();
				DocumentBuilder db = dbf.newDocumentBuilder();
				Document document = db.parse(new File(System
						.getProperty("user.dir")
						+ "/temp/apk/AndroidManifest.xml"));
				NodeList nodeList = document.getElementsByTagName("manifest");
				for (int x = 0, size = nodeList.getLength(); x < size; x++) {
					packageName = nodeList.item(x).getAttributes()
							.getNamedItem("package").getNodeValue();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			} catch (SAXException ex) {
				ex.printStackTrace();
			} catch (ParserConfigurationException ex) {
				ex.printStackTrace();
			}

			command = new String[] { init.path_to_adb, "shell", "am",
					"startservice", "--user", "0", "-a",
					"com.example.smalli.service", "-n",
					packageName + "/com.example.service.SocketService" };
			runCommand(command);
			

			command = new String[] { init.path_to_adb, "forward",
					"tcp:" + init.port, "tcp:" + init.port };
			runCommand(command);
		
		
		

		

		} else {
			log.append("Open command cancelled by user\n");
		}

		
	}
	
	
	@Override
	public void actionPerformed(ActionEvent e) {
		
		if(e.getActionCommand().equals(Menu.CONNECT)){ 
				client = null;
				log.setText("");
				try {
					client = new SocketClient(init.port);
					browser = null;
					browser = new ApkBrowser(init);
					browser.createAndShow(client);
					browser.setPreferredSize(new Dimension(900, 600));
					browser.buildTree();
					browser.setOpaque(true);
					frame.setContentPane(browser);
					frame.pack();
				} catch (UnknownHostException e1) {
					log.setText("UnknowHost expception");
					return;
					
				} catch (IOException e1) {
					log.setText("IOException! Probably no service listening. Try to install again!");
					return;
				} catch(Exception e1){
					log.setText("Exception! Probably no service listening. Try to install again!");
					return;
			
				}
			
			
		}else if (e.getActionCommand().equals(Menu.INSTALL)){
			log.setText("");
			client = null;
			log.setText("");
			try {
				//first stoping if some service listening
				client = new SocketClient(init.port);
				SerializedObject object = new SerializedObject("", "",0, "", "");
				TransactionUnit<SerializedObject> tu = new TransactionUnit<SerializedObject>(object);
				tu.desc = "stop";
				client.message(tu);
				
			} catch (UnknownHostException e1) {
				log.setText("UnknowHost expception");
				return;
				
			} catch (IOException e1) {
				//do nothing on exception -- it means no service yet installed
				
			}catch (ClassNotFoundException e1) {
				//should not happen
				e1.printStackTrace();
			}
			frame.setContentPane(this);
			frame.pack();
			install();
		}
			
		
		
	}
}
