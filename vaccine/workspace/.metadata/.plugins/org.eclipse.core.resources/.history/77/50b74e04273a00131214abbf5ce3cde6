import java.io.File;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import dalvik.system.DexClassLoader;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtConstructor;
import javassist.CtMethod;
import javassist.android.DexFile;


private static final String DEX_FILE_NAME_MYCLASSES = "myclasses.dex";
final File dexFile = new File(getFilesDir(), DEX_FILE_NAME_MYCLASSES);
    
final ClassPool cp = ClassPool.getDefault(XXXXX.getApplicationContext());
CtClass parent = cPool.get("YYYYYYY");
final CtClass cls = cp.makeClass("AppExtend",parent);

final CtConstructor ctor = new CtConstructor(null, cls);
ctor.setBody("{}");
cls.addConstructor(ctor);
final CtMethod m1 = CtMethod.make(
		"public void testPrivate (){ System.out.println("No more private"); super.testPrivate(); }",
		cls);
		
cls.addMethod(m1);
cls.writeFile(XXXXX.getFilesDir().getAbsolutePath());

// convert from "xxx.class" to "xxx.dex"
final DexFile df = new DexFile();
final String dexFilePath = dexFile.getAbsolutePath();
df.addClass(new File(getFilesDir(), "hoge.class"));
df.writeFile(dexFilePath);
	

final DexClassLoader dcl = new DexClassLoader(
		dexFile.getAbsolutePath(),
		getCacheDir().getAbsolutePath(),
		getApplicationInfo().nativeLibraryDir,
		getClassLoader());
String title = null;
final Class<?> class_hoge = dcl.loadClass("hoge");
final Constructor<?> ctor = class_hoge.getConstructor(new Class<?>[0]);
final Object obj = ctor.newInstance(new Object[0]);
		


   
