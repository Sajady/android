import java.io.File;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import dalvik.system.DexClassLoader;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtConstructor;
import javassist.CtMethod;
import javassist.android.DexFile;


private static final String DEX_FILE_NAME_MYCLASSES = "myclasses.dex";
final File dexFile = new File(__com.example.smalli.Third.getFilesDir(), DEX_FILE_NAME_MYCLASSES);
    
final ClassPool cp = ClassPool.getDefault(__com.example.smalli.Third.getApplicationContext());
final CtClass cls = cp.makeClass("Info");
final CtMethod m1 = CtMethod.make(
		"public void testPrivate (){ System.out.println(\"New class created on the fly!!!\"); }",
		cls);
		
		
cls.addMethod(m1);
cls.writeFile(__com.example.smalli.Third.getFilesDir().getAbsolutePath());

// convert from "xxx.class" to "xxx.dex"
final DexFile df = new DexFile();
final String dexFilePath = dexFile.getAbsolutePath();
df.addClass(new File(getFilesDir(), "Info.class"));
df.writeFile(dexFilePath);
	

final DexClassLoader dcl = new DexClassLoader(
		dexFile.getAbsolutePath(),
		__com.example.smalli.Third.getCacheDir().getAbsolutePath(),
		__com.example.smalli.Third.getApplicationInfo().nativeLibraryDir,
		getClassLoader());
final Class info = dcl.loadClass("Info");
final Constructor ctor = info.getConstructor(new Class[0]);
final Object obj = ctor.newInstance(new Object[0]);
		
s